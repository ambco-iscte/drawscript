[{"name":"ADD","description":"ast.expressions.binary.BinaryOperator.ADD","location":"-draw-script/ast.expressions.binary/-binary-operator/-a-d-d/index.html","searchKeys":["ADD","ADD","ast.expressions.binary.BinaryOperator.ADD"]},{"name":"ARITHMETIC","description":"ast.expressions.binary.BinaryOperator.BinaryOperatorType.ARITHMETIC","location":"-draw-script/ast.expressions.binary/-binary-operator/-binary-operator-type/-a-r-i-t-h-m-e-t-i-c/index.html","searchKeys":["ARITHMETIC","ARITHMETIC","ast.expressions.binary.BinaryOperator.BinaryOperatorType.ARITHMETIC"]},{"name":"BOOLEAN","description":"ast.expressions.Expression.ExpressionType.BOOLEAN","location":"-draw-script/ast.expressions/-expression/-expression-type/-b-o-o-l-e-a-n/index.html","searchKeys":["BOOLEAN","BOOLEAN","ast.expressions.Expression.ExpressionType.BOOLEAN"]},{"name":"CLOSED","description":"ast.expressions.literal.Interval.IntervalType.CLOSED","location":"-draw-script/ast.expressions.literal/-interval/-interval-type/-c-l-o-s-e-d/index.html","searchKeys":["CLOSED","CLOSED","ast.expressions.literal.Interval.IntervalType.CLOSED"]},{"name":"COLOUR","description":"ast.expressions.Expression.ExpressionType.COLOUR","location":"-draw-script/ast.expressions/-expression/-expression-type/-c-o-l-o-u-r/index.html","searchKeys":["COLOUR","COLOUR","ast.expressions.Expression.ExpressionType.COLOUR"]},{"name":"DIV","description":"ast.expressions.binary.BinaryOperator.DIV","location":"-draw-script/ast.expressions.binary/-binary-operator/-d-i-v/index.html","searchKeys":["DIV","DIV","ast.expressions.binary.BinaryOperator.DIV"]},{"name":"EQUALS","description":"ast.expressions.binary.BinaryOperator.EQUALS","location":"-draw-script/ast.expressions.binary/-binary-operator/-e-q-u-a-l-s/index.html","searchKeys":["EQUALS","EQUALS","ast.expressions.binary.BinaryOperator.EQUALS"]},{"name":"GEQ","description":"ast.expressions.binary.BinaryOperator.GEQ","location":"-draw-script/ast.expressions.binary/-binary-operator/-g-e-q/index.html","searchKeys":["GEQ","GEQ","ast.expressions.binary.BinaryOperator.GEQ"]},{"name":"GREATER","description":"ast.expressions.binary.BinaryOperator.GREATER","location":"-draw-script/ast.expressions.binary/-binary-operator/-g-r-e-a-t-e-r/index.html","searchKeys":["GREATER","GREATER","ast.expressions.binary.BinaryOperator.GREATER"]},{"name":"INTEGER","description":"ast.expressions.Expression.ExpressionType.INTEGER","location":"-draw-script/ast.expressions/-expression/-expression-type/-i-n-t-e-g-e-r/index.html","searchKeys":["INTEGER","INTEGER","ast.expressions.Expression.ExpressionType.INTEGER"]},{"name":"INTERVAL","description":"ast.expressions.Expression.ExpressionType.INTERVAL","location":"-draw-script/ast.expressions/-expression/-expression-type/-i-n-t-e-r-v-a-l/index.html","searchKeys":["INTERVAL","INTERVAL","ast.expressions.Expression.ExpressionType.INTERVAL"]},{"name":"LEFT_OPEN","description":"ast.expressions.literal.Interval.IntervalType.LEFT_OPEN","location":"-draw-script/ast.expressions.literal/-interval/-interval-type/-l-e-f-t_-o-p-e-n/index.html","searchKeys":["LEFT_OPEN","LEFT_OPEN","ast.expressions.literal.Interval.IntervalType.LEFT_OPEN"]},{"name":"LEQ","description":"ast.expressions.binary.BinaryOperator.LEQ","location":"-draw-script/ast.expressions.binary/-binary-operator/-l-e-q/index.html","searchKeys":["LEQ","LEQ","ast.expressions.binary.BinaryOperator.LEQ"]},{"name":"LESS","description":"ast.expressions.binary.BinaryOperator.LESS","location":"-draw-script/ast.expressions.binary/-binary-operator/-l-e-s-s/index.html","searchKeys":["LESS","LESS","ast.expressions.binary.BinaryOperator.LESS"]},{"name":"MOD","description":"ast.expressions.binary.BinaryOperator.MOD","location":"-draw-script/ast.expressions.binary/-binary-operator/-m-o-d/index.html","searchKeys":["MOD","MOD","ast.expressions.binary.BinaryOperator.MOD"]},{"name":"MUL","description":"ast.expressions.binary.BinaryOperator.MUL","location":"-draw-script/ast.expressions.binary/-binary-operator/-m-u-l/index.html","searchKeys":["MUL","MUL","ast.expressions.binary.BinaryOperator.MUL"]},{"name":"NEQ","description":"ast.expressions.binary.BinaryOperator.NEQ","location":"-draw-script/ast.expressions.binary/-binary-operator/-n-e-q/index.html","searchKeys":["NEQ","NEQ","ast.expressions.binary.BinaryOperator.NEQ"]},{"name":"OPEN","description":"ast.expressions.literal.Interval.IntervalType.OPEN","location":"-draw-script/ast.expressions.literal/-interval/-interval-type/-o-p-e-n/index.html","searchKeys":["OPEN","OPEN","ast.expressions.literal.Interval.IntervalType.OPEN"]},{"name":"POINT","description":"ast.expressions.Expression.ExpressionType.POINT","location":"-draw-script/ast.expressions/-expression/-expression-type/-p-o-i-n-t/index.html","searchKeys":["POINT","POINT","ast.expressions.Expression.ExpressionType.POINT"]},{"name":"POW","description":"ast.expressions.binary.BinaryOperator.POW","location":"-draw-script/ast.expressions.binary/-binary-operator/-p-o-w/index.html","searchKeys":["POW","POW","ast.expressions.binary.BinaryOperator.POW"]},{"name":"RELATIONAL","description":"ast.expressions.binary.BinaryOperator.BinaryOperatorType.RELATIONAL","location":"-draw-script/ast.expressions.binary/-binary-operator/-binary-operator-type/-r-e-l-a-t-i-o-n-a-l/index.html","searchKeys":["RELATIONAL","RELATIONAL","ast.expressions.binary.BinaryOperator.BinaryOperatorType.RELATIONAL"]},{"name":"RIGHT_OPEN","description":"ast.expressions.literal.Interval.IntervalType.RIGHT_OPEN","location":"-draw-script/ast.expressions.literal/-interval/-interval-type/-r-i-g-h-t_-o-p-e-n/index.html","searchKeys":["RIGHT_OPEN","RIGHT_OPEN","ast.expressions.literal.Interval.IntervalType.RIGHT_OPEN"]},{"name":"SUB","description":"ast.expressions.binary.BinaryOperator.SUB","location":"-draw-script/ast.expressions.binary/-binary-operator/-s-u-b/index.html","searchKeys":["SUB","SUB","ast.expressions.binary.BinaryOperator.SUB"]},{"name":"VARIABLE","description":"ast.expressions.Expression.ExpressionType.VARIABLE","location":"-draw-script/ast.expressions/-expression/-expression-type/-v-a-r-i-a-b-l-e/index.html","searchKeys":["VARIABLE","VARIABLE","ast.expressions.Expression.ExpressionType.VARIABLE"]},{"name":"abstract var parent: Instruction?","description":"ast.instructions.Instruction.parent","location":"-draw-script/ast.instructions/-instruction/parent.html","searchKeys":["parent","abstract var parent: Instruction?","ast.instructions.Instruction.parent"]},{"name":"class DrawScriptInterpreter","description":"interpretation.DrawScriptInterpreter","location":"-draw-script/interpretation/-draw-script-interpreter/index.html","searchKeys":["DrawScriptInterpreter","class DrawScriptInterpreter","interpretation.DrawScriptInterpreter"]},{"name":"constructor()","description":"interpretation.DrawScriptInterpreter.DrawScriptInterpreter","location":"-draw-script/interpretation/-draw-script-interpreter/-draw-script-interpreter.html","searchKeys":["DrawScriptInterpreter","constructor()","interpretation.DrawScriptInterpreter.DrawScriptInterpreter"]},{"name":"constructor(center: Point, radius: Expression)","description":"ast.instructions.figure.Circle.Circle","location":"-draw-script/ast.instructions.figure/-circle/-circle.html","searchKeys":["Circle","constructor(center: Point, radius: Expression)","ast.instructions.figure.Circle.Circle"]},{"name":"constructor(center: Point, width: Expression, height: Expression)","description":"ast.instructions.figure.Ellipse.Ellipse","location":"-draw-script/ast.instructions.figure/-ellipse/-ellipse.html","searchKeys":["Ellipse","constructor(center: Point, width: Expression, height: Expression)","ast.instructions.figure.Ellipse.Ellipse"]},{"name":"constructor(colour: Expression)","description":"ast.instructions.colour.SetFillColour.SetFillColour","location":"-draw-script/ast.instructions.colour/-set-fill-colour/-set-fill-colour.html","searchKeys":["SetFillColour","constructor(colour: Expression)","ast.instructions.colour.SetFillColour.SetFillColour"]},{"name":"constructor(colour: Expression)","description":"ast.instructions.colour.SetLineColour.SetLineColour","location":"-draw-script/ast.instructions.colour/-set-line-colour/-set-line-colour.html","searchKeys":["SetLineColour","constructor(colour: Expression)","ast.instructions.colour.SetLineColour.SetLineColour"]},{"name":"constructor(constants: Map<String, Expression>, dimension: Expression = Point(Number(100), Number(100)), backgroundColour: Expression = Colour(Number(255), Number(255), Number(255)), instructions: List<Instruction>)","description":"ast.Script.Script","location":"-draw-script/ast/-script/-script.html","searchKeys":["Script","constructor(constants: Map<String, Expression>, dimension: Expression = Point(Number(100), Number(100)), backgroundColour: Expression = Colour(Number(255), Number(255), Number(255)), instructions: List<Instruction>)","ast.Script.Script"]},{"name":"constructor(expected: List<Expression.ExpressionType>, actual: Expression.ExpressionType, source: Expression)","description":"ast.validation.InvalidReferenceType.InvalidReferenceType","location":"-draw-script/ast.validation/-invalid-reference-type/-invalid-reference-type.html","searchKeys":["InvalidReferenceType","constructor(expected: List<Expression.ExpressionType>, actual: Expression.ExpressionType, source: Expression)","ast.validation.InvalidReferenceType.InvalidReferenceType"]},{"name":"constructor(guard: Expression, body: List<Instruction>, alternative: List<Instruction> = listOf())","description":"ast.instructions.control.Branch.Branch","location":"-draw-script/ast.instructions.control/-branch/-branch.html","searchKeys":["Branch","constructor(guard: Expression, body: List<Instruction>, alternative: List<Instruction> = listOf())","ast.instructions.control.Branch.Branch"]},{"name":"constructor(identifier: String)","description":"ast.expressions.literal.ConstantReference.ConstantReference","location":"-draw-script/ast.expressions.literal/-constant-reference/-constant-reference.html","searchKeys":["ConstantReference","constructor(identifier: String)","ast.expressions.literal.ConstantReference.ConstantReference"]},{"name":"constructor(identifier: String)","description":"ast.expressions.literal.VariableReference.VariableReference","location":"-draw-script/ast.expressions.literal/-variable-reference/-variable-reference.html","searchKeys":["VariableReference","constructor(identifier: String)","ast.expressions.literal.VariableReference.VariableReference"]},{"name":"constructor(identifier: String, source: Expression)","description":"ast.validation.UndefinedConstantReference.UndefinedConstantReference","location":"-draw-script/ast.validation/-undefined-constant-reference/-undefined-constant-reference.html","searchKeys":["UndefinedConstantReference","constructor(identifier: String, source: Expression)","ast.validation.UndefinedConstantReference.UndefinedConstantReference"]},{"name":"constructor(interval: Interval)","description":"ast.validation.InvalidIntervalDefinition.InvalidIntervalDefinition","location":"-draw-script/ast.validation/-invalid-interval-definition/-invalid-interval-definition.html","searchKeys":["InvalidIntervalDefinition","constructor(interval: Interval)","ast.validation.InvalidIntervalDefinition.InvalidIntervalDefinition"]},{"name":"constructor(interval: Interval, iterator: VariableReference, body: List<Instruction>)","description":"ast.instructions.control.Iteration.Iteration","location":"-draw-script/ast.instructions.control/-iteration/-iteration.html","searchKeys":["Iteration","constructor(interval: Interval, iterator: VariableReference, body: List<Instruction>)","ast.instructions.control.Iteration.Iteration"]},{"name":"constructor(left: Expression, operator: BinaryOperator, right: Expression)","description":"ast.expressions.binary.BinaryExpression.BinaryExpression","location":"-draw-script/ast.expressions.binary/-binary-expression/-binary-expression.html","searchKeys":["BinaryExpression","constructor(left: Expression, operator: BinaryOperator, right: Expression)","ast.expressions.binary.BinaryExpression.BinaryExpression"]},{"name":"constructor(r: Int, g: Int, b: Int, source: Expression)","description":"ast.validation.InvalidColorRGBValues.InvalidColorRGBValues","location":"-draw-script/ast.validation/-invalid-color-r-g-b-values/-invalid-color-r-g-b-values.html","searchKeys":["InvalidColorRGBValues","constructor(r: Int, g: Int, b: Int, source: Expression)","ast.validation.InvalidColorRGBValues.InvalidColorRGBValues"]},{"name":"constructor(red: Expression, green: Expression, blue: Expression)","description":"ast.expressions.literal.Colour.Colour","location":"-draw-script/ast.expressions.literal/-colour/-colour.html","searchKeys":["Colour","constructor(red: Expression, green: Expression, blue: Expression)","ast.expressions.literal.Colour.Colour"]},{"name":"constructor(source: BinaryExpression)","description":"ast.validation.InvalidBinaryExpressionOperatorContext.InvalidBinaryExpressionOperatorContext","location":"-draw-script/ast.validation/-invalid-binary-expression-operator-context/-invalid-binary-expression-operator-context.html","searchKeys":["InvalidBinaryExpressionOperatorContext","constructor(source: BinaryExpression)","ast.validation.InvalidBinaryExpressionOperatorContext.InvalidBinaryExpressionOperatorContext"]},{"name":"constructor(start: Expression, end: Expression, type: Interval.IntervalType)","description":"ast.expressions.literal.Interval.Interval","location":"-draw-script/ast.expressions.literal/-interval/-interval.html","searchKeys":["Interval","constructor(start: Expression, end: Expression, type: Interval.IntervalType)","ast.expressions.literal.Interval.Interval"]},{"name":"constructor(start: Point)","description":"ast.instructions.figure.FigureInstruction.FigureInstruction","location":"-draw-script/ast.instructions.figure/-figure-instruction/-figure-instruction.html","searchKeys":["FigureInstruction","constructor(start: Point)","ast.instructions.figure.FigureInstruction.FigureInstruction"]},{"name":"constructor(start: Point, end: Point)","description":"ast.instructions.figure.Line.Line","location":"-draw-script/ast.instructions.figure/-line/-line.html","searchKeys":["Line","constructor(start: Point, end: Point)","ast.instructions.figure.Line.Line"]},{"name":"constructor(start: Point, length: Expression)","description":"ast.instructions.figure.Square.Square","location":"-draw-script/ast.instructions.figure/-square/-square.html","searchKeys":["Square","constructor(start: Point, length: Expression)","ast.instructions.figure.Square.Square"]},{"name":"constructor(start: Point, points: List<Point>)","description":"ast.instructions.figure.Polyline.Polyline","location":"-draw-script/ast.instructions.figure/-polyline/-polyline.html","searchKeys":["Polyline","constructor(start: Point, points: List<Point>)","ast.instructions.figure.Polyline.Polyline"]},{"name":"constructor(start: Point, width: Expression, height: Expression)","description":"ast.instructions.figure.Rectangle.Rectangle","location":"-draw-script/ast.instructions.figure/-rectangle/-rectangle.html","searchKeys":["Rectangle","constructor(start: Point, width: Expression, height: Expression)","ast.instructions.figure.Rectangle.Rectangle"]},{"name":"constructor(value: Boolean)","description":"ast.expressions.literal.Bool.Bool","location":"-draw-script/ast.expressions.literal/-bool/-bool.html","searchKeys":["Bool","constructor(value: Boolean)","ast.expressions.literal.Bool.Bool"]},{"name":"constructor(value: Int)","description":"ast.expressions.literal.Number.Number","location":"-draw-script/ast.expressions.literal/-number/-number.html","searchKeys":["Number","constructor(value: Int)","ast.expressions.literal.Number.Number"]},{"name":"constructor(x: Expression, y: Expression)","description":"ast.expressions.literal.Point.Point","location":"-draw-script/ast.expressions.literal/-point/-point.html","searchKeys":["Point","constructor(x: Expression, y: Expression)","ast.expressions.literal.Point.Point"]},{"name":"data class BinaryExpression(val left: Expression, val operator: BinaryOperator, val right: Expression) : Expression","description":"ast.expressions.binary.BinaryExpression","location":"-draw-script/ast.expressions.binary/-binary-expression/index.html","searchKeys":["BinaryExpression","data class BinaryExpression(val left: Expression, val operator: BinaryOperator, val right: Expression) : Expression","ast.expressions.binary.BinaryExpression"]},{"name":"data class Bool(val value: Boolean) : PrimitiveType","description":"ast.expressions.literal.Bool","location":"-draw-script/ast.expressions.literal/-bool/index.html","searchKeys":["Bool","data class Bool(val value: Boolean) : PrimitiveType","ast.expressions.literal.Bool"]},{"name":"data class Branch(val guard: Expression, val body: List<Instruction>, val alternative: List<Instruction> = listOf()) : ControlStructure","description":"ast.instructions.control.Branch","location":"-draw-script/ast.instructions.control/-branch/index.html","searchKeys":["Branch","data class Branch(val guard: Expression, val body: List<Instruction>, val alternative: List<Instruction> = listOf()) : ControlStructure","ast.instructions.control.Branch"]},{"name":"data class Circle(val center: Point, val radius: Expression) : Ellipse","description":"ast.instructions.figure.Circle","location":"-draw-script/ast.instructions.figure/-circle/index.html","searchKeys":["Circle","data class Circle(val center: Point, val radius: Expression) : Ellipse","ast.instructions.figure.Circle"]},{"name":"data class Colour(val red: Expression, val green: Expression, val blue: Expression) : PrimitiveType","description":"ast.expressions.literal.Colour","location":"-draw-script/ast.expressions.literal/-colour/index.html","searchKeys":["Colour","data class Colour(val red: Expression, val green: Expression, val blue: Expression) : PrimitiveType","ast.expressions.literal.Colour"]},{"name":"data class ConstantReference(val identifier: String) : Expression","description":"ast.expressions.literal.ConstantReference","location":"-draw-script/ast.expressions.literal/-constant-reference/index.html","searchKeys":["ConstantReference","data class ConstantReference(val identifier: String) : Expression","ast.expressions.literal.ConstantReference"]},{"name":"data class Interval(val start: Expression, val end: Expression, val type: Interval.IntervalType) : PrimitiveType","description":"ast.expressions.literal.Interval","location":"-draw-script/ast.expressions.literal/-interval/index.html","searchKeys":["Interval","data class Interval(val start: Expression, val end: Expression, val type: Interval.IntervalType) : PrimitiveType","ast.expressions.literal.Interval"]},{"name":"data class InvalidBinaryExpressionOperatorContext(val source: BinaryExpression) : SemanticError","description":"ast.validation.InvalidBinaryExpressionOperatorContext","location":"-draw-script/ast.validation/-invalid-binary-expression-operator-context/index.html","searchKeys":["InvalidBinaryExpressionOperatorContext","data class InvalidBinaryExpressionOperatorContext(val source: BinaryExpression) : SemanticError","ast.validation.InvalidBinaryExpressionOperatorContext"]},{"name":"data class InvalidColorRGBValues(val r: Int, val g: Int, val b: Int, val source: Expression) : SemanticError","description":"ast.validation.InvalidColorRGBValues","location":"-draw-script/ast.validation/-invalid-color-r-g-b-values/index.html","searchKeys":["InvalidColorRGBValues","data class InvalidColorRGBValues(val r: Int, val g: Int, val b: Int, val source: Expression) : SemanticError","ast.validation.InvalidColorRGBValues"]},{"name":"data class InvalidIntervalDefinition(val interval: Interval) : SemanticError","description":"ast.validation.InvalidIntervalDefinition","location":"-draw-script/ast.validation/-invalid-interval-definition/index.html","searchKeys":["InvalidIntervalDefinition","data class InvalidIntervalDefinition(val interval: Interval) : SemanticError","ast.validation.InvalidIntervalDefinition"]},{"name":"data class InvalidReferenceType(val expected: List<Expression.ExpressionType>, val actual: Expression.ExpressionType, val source: Expression) : SemanticError","description":"ast.validation.InvalidReferenceType","location":"-draw-script/ast.validation/-invalid-reference-type/index.html","searchKeys":["InvalidReferenceType","data class InvalidReferenceType(val expected: List<Expression.ExpressionType>, val actual: Expression.ExpressionType, val source: Expression) : SemanticError","ast.validation.InvalidReferenceType"]},{"name":"data class Iteration(val interval: Interval, val iterator: VariableReference, val body: List<Instruction>) : ControlStructure","description":"ast.instructions.control.Iteration","location":"-draw-script/ast.instructions.control/-iteration/index.html","searchKeys":["Iteration","data class Iteration(val interval: Interval, val iterator: VariableReference, val body: List<Instruction>) : ControlStructure","ast.instructions.control.Iteration"]},{"name":"data class Line(val start: Point, val end: Point) : FigureInstruction","description":"ast.instructions.figure.Line","location":"-draw-script/ast.instructions.figure/-line/index.html","searchKeys":["Line","data class Line(val start: Point, val end: Point) : FigureInstruction","ast.instructions.figure.Line"]},{"name":"data class Number(val value: Int) : PrimitiveType","description":"ast.expressions.literal.Number","location":"-draw-script/ast.expressions.literal/-number/index.html","searchKeys":["Number","data class Number(val value: Int) : PrimitiveType","ast.expressions.literal.Number"]},{"name":"data class Point(val x: Expression, val y: Expression) : PrimitiveType","description":"ast.expressions.literal.Point","location":"-draw-script/ast.expressions.literal/-point/index.html","searchKeys":["Point","data class Point(val x: Expression, val y: Expression) : PrimitiveType","ast.expressions.literal.Point"]},{"name":"data class Polyline(val start: Point, val points: List<Point>) : FigureInstruction","description":"ast.instructions.figure.Polyline","location":"-draw-script/ast.instructions.figure/-polyline/index.html","searchKeys":["Polyline","data class Polyline(val start: Point, val points: List<Point>) : FigureInstruction","ast.instructions.figure.Polyline"]},{"name":"data class Script(val constants: Map<String, Expression>, val dimension: Expression = Point(Number(100), Number(100)), val backgroundColour: Expression = Colour(Number(255), Number(255), Number(255)), val instructions: List<Instruction>)","description":"ast.Script","location":"-draw-script/ast/-script/index.html","searchKeys":["Script","data class Script(val constants: Map<String, Expression>, val dimension: Expression = Point(Number(100), Number(100)), val backgroundColour: Expression = Colour(Number(255), Number(255), Number(255)), val instructions: List<Instruction>)","ast.Script"]},{"name":"data class SetFillColour(val colour: Expression) : Instruction","description":"ast.instructions.colour.SetFillColour","location":"-draw-script/ast.instructions.colour/-set-fill-colour/index.html","searchKeys":["SetFillColour","data class SetFillColour(val colour: Expression) : Instruction","ast.instructions.colour.SetFillColour"]},{"name":"data class SetLineColour(val colour: Expression) : Instruction","description":"ast.instructions.colour.SetLineColour","location":"-draw-script/ast.instructions.colour/-set-line-colour/index.html","searchKeys":["SetLineColour","data class SetLineColour(val colour: Expression) : Instruction","ast.instructions.colour.SetLineColour"]},{"name":"data class Square(val start: Point, val length: Expression) : Rectangle","description":"ast.instructions.figure.Square","location":"-draw-script/ast.instructions.figure/-square/index.html","searchKeys":["Square","data class Square(val start: Point, val length: Expression) : Rectangle","ast.instructions.figure.Square"]},{"name":"data class UndefinedConstantReference(val identifier: String, val source: Expression) : SemanticError","description":"ast.validation.UndefinedConstantReference","location":"-draw-script/ast.validation/-undefined-constant-reference/index.html","searchKeys":["UndefinedConstantReference","data class UndefinedConstantReference(val identifier: String, val source: Expression) : SemanticError","ast.validation.UndefinedConstantReference"]},{"name":"data class VariableReference(val identifier: String) : Expression","description":"ast.expressions.literal.VariableReference","location":"-draw-script/ast.expressions.literal/-variable-reference/index.html","searchKeys":["VariableReference","data class VariableReference(val identifier: String) : Expression","ast.expressions.literal.VariableReference"]},{"name":"enum BinaryOperator : Enum<BinaryOperator> ","description":"ast.expressions.binary.BinaryOperator","location":"-draw-script/ast.expressions.binary/-binary-operator/index.html","searchKeys":["BinaryOperator","enum BinaryOperator : Enum<BinaryOperator> ","ast.expressions.binary.BinaryOperator"]},{"name":"enum BinaryOperatorType : Enum<BinaryOperator.BinaryOperatorType> ","description":"ast.expressions.binary.BinaryOperator.BinaryOperatorType","location":"-draw-script/ast.expressions.binary/-binary-operator/-binary-operator-type/index.html","searchKeys":["BinaryOperatorType","enum BinaryOperatorType : Enum<BinaryOperator.BinaryOperatorType> ","ast.expressions.binary.BinaryOperator.BinaryOperatorType"]},{"name":"enum ExpressionType : Enum<Expression.ExpressionType> ","description":"ast.expressions.Expression.ExpressionType","location":"-draw-script/ast.expressions/-expression/-expression-type/index.html","searchKeys":["ExpressionType","enum ExpressionType : Enum<Expression.ExpressionType> ","ast.expressions.Expression.ExpressionType"]},{"name":"enum IntervalType : Enum<Interval.IntervalType> ","description":"ast.expressions.literal.Interval.IntervalType","location":"-draw-script/ast.expressions.literal/-interval/-interval-type/index.html","searchKeys":["IntervalType","enum IntervalType : Enum<Interval.IntervalType> ","ast.expressions.literal.Interval.IntervalType"]},{"name":"fun applySemantically(left: Expression, right: Expression): Expression","description":"ast.expressions.binary.BinaryOperator.applySemantically","location":"-draw-script/ast.expressions.binary/-binary-operator/apply-semantically.html","searchKeys":["applySemantically","fun applySemantically(left: Expression, right: Expression): Expression","ast.expressions.binary.BinaryOperator.applySemantically"]},{"name":"fun isValid(): Boolean","description":"ast.Script.isValid","location":"-draw-script/ast/-script/is-valid.html","searchKeys":["isValid","fun isValid(): Boolean","ast.Script.isValid"]},{"name":"fun main()","description":".main","location":"-draw-script/[root]/main.html","searchKeys":["main","fun main()",".main"]},{"name":"fun open()","description":"interpretation.DrawScriptInterpreter.open","location":"-draw-script/interpretation/-draw-script-interpreter/open.html","searchKeys":["open","fun open()","interpretation.DrawScriptInterpreter.open"]},{"name":"fun parse(symbol: String): BinaryOperator","description":"ast.expressions.binary.BinaryOperator.Companion.parse","location":"-draw-script/ast.expressions.binary/-binary-operator/-companion/parse.html","searchKeys":["parse","fun parse(symbol: String): BinaryOperator","ast.expressions.binary.BinaryOperator.Companion.parse"]},{"name":"fun validate(): List<SemanticError>","description":"ast.Script.validate","location":"-draw-script/ast/-script/validate.html","searchKeys":["validate","fun validate(): List<SemanticError>","ast.Script.validate"]},{"name":"fun valueOf(value: String): BinaryOperator","description":"ast.expressions.binary.BinaryOperator.valueOf","location":"-draw-script/ast.expressions.binary/-binary-operator/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): BinaryOperator","ast.expressions.binary.BinaryOperator.valueOf"]},{"name":"fun valueOf(value: String): BinaryOperator.BinaryOperatorType","description":"ast.expressions.binary.BinaryOperator.BinaryOperatorType.valueOf","location":"-draw-script/ast.expressions.binary/-binary-operator/-binary-operator-type/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): BinaryOperator.BinaryOperatorType","ast.expressions.binary.BinaryOperator.BinaryOperatorType.valueOf"]},{"name":"fun valueOf(value: String): Expression.ExpressionType","description":"ast.expressions.Expression.ExpressionType.valueOf","location":"-draw-script/ast.expressions/-expression/-expression-type/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): Expression.ExpressionType","ast.expressions.Expression.ExpressionType.valueOf"]},{"name":"fun valueOf(value: String): Interval.IntervalType","description":"ast.expressions.literal.Interval.IntervalType.valueOf","location":"-draw-script/ast.expressions.literal/-interval/-interval-type/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): Interval.IntervalType","ast.expressions.literal.Interval.IntervalType.valueOf"]},{"name":"fun values(): Array<BinaryOperator.BinaryOperatorType>","description":"ast.expressions.binary.BinaryOperator.BinaryOperatorType.values","location":"-draw-script/ast.expressions.binary/-binary-operator/-binary-operator-type/values.html","searchKeys":["values","fun values(): Array<BinaryOperator.BinaryOperatorType>","ast.expressions.binary.BinaryOperator.BinaryOperatorType.values"]},{"name":"fun values(): Array<BinaryOperator>","description":"ast.expressions.binary.BinaryOperator.values","location":"-draw-script/ast.expressions.binary/-binary-operator/values.html","searchKeys":["values","fun values(): Array<BinaryOperator>","ast.expressions.binary.BinaryOperator.values"]},{"name":"fun values(): Array<Expression.ExpressionType>","description":"ast.expressions.Expression.ExpressionType.values","location":"-draw-script/ast.expressions/-expression/-expression-type/values.html","searchKeys":["values","fun values(): Array<Expression.ExpressionType>","ast.expressions.Expression.ExpressionType.values"]},{"name":"fun values(): Array<Interval.IntervalType>","description":"ast.expressions.literal.Interval.IntervalType.values","location":"-draw-script/ast.expressions.literal/-interval/-interval-type/values.html","searchKeys":["values","fun values(): Array<Interval.IntervalType>","ast.expressions.literal.Interval.IntervalType.values"]},{"name":"interface ControlStructure : Instruction","description":"ast.instructions.control.ControlStructure","location":"-draw-script/ast.instructions.control/-control-structure/index.html","searchKeys":["ControlStructure","interface ControlStructure : Instruction","ast.instructions.control.ControlStructure"]},{"name":"interface Expression","description":"ast.expressions.Expression","location":"-draw-script/ast.expressions/-expression/index.html","searchKeys":["Expression","interface Expression","ast.expressions.Expression"]},{"name":"interface Instruction","description":"ast.instructions.Instruction","location":"-draw-script/ast.instructions/-instruction/index.html","searchKeys":["Instruction","interface Instruction","ast.instructions.Instruction"]},{"name":"interface PrimitiveType : Expression","description":"ast.expressions.literal.PrimitiveType","location":"-draw-script/ast.expressions.literal/-primitive-type/index.html","searchKeys":["PrimitiveType","interface PrimitiveType : Expression","ast.expressions.literal.PrimitiveType"]},{"name":"object Companion","description":"ast.expressions.binary.BinaryOperator.Companion","location":"-draw-script/ast.expressions.binary/-binary-operator/-companion/index.html","searchKeys":["Companion","object Companion","ast.expressions.binary.BinaryOperator.Companion"]},{"name":"open class Ellipse(val center: Point, val width: Expression, val height: Expression) : FigureInstruction","description":"ast.instructions.figure.Ellipse","location":"-draw-script/ast.instructions.figure/-ellipse/index.html","searchKeys":["Ellipse","open class Ellipse(val center: Point, val width: Expression, val height: Expression) : FigureInstruction","ast.instructions.figure.Ellipse"]},{"name":"open class FigureInstruction(val start: Point) : Instruction","description":"ast.instructions.figure.FigureInstruction","location":"-draw-script/ast.instructions.figure/-figure-instruction/index.html","searchKeys":["FigureInstruction","open class FigureInstruction(val start: Point) : Instruction","ast.instructions.figure.FigureInstruction"]},{"name":"open class Rectangle(val start: Point, val width: Expression, val height: Expression) : FigureInstruction","description":"ast.instructions.figure.Rectangle","location":"-draw-script/ast.instructions.figure/-rectangle/index.html","searchKeys":["Rectangle","open class Rectangle(val start: Point, val width: Expression, val height: Expression) : FigureInstruction","ast.instructions.figure.Rectangle"]},{"name":"open fun getReferencedVariableIdentifiers(): List<String>","description":"ast.expressions.Expression.getReferencedVariableIdentifiers","location":"-draw-script/ast.expressions/-expression/get-referenced-variable-identifiers.html","searchKeys":["getReferencedVariableIdentifiers","open fun getReferencedVariableIdentifiers(): List<String>","ast.expressions.Expression.getReferencedVariableIdentifiers"]},{"name":"open fun referencesVariables(): Boolean","description":"ast.expressions.Expression.referencesVariables","location":"-draw-script/ast.expressions/-expression/references-variables.html","searchKeys":["referencesVariables","open fun referencesVariables(): Boolean","ast.expressions.Expression.referencesVariables"]},{"name":"open override fun getReferencedVariableIdentifiers(): List<String>","description":"ast.expressions.binary.BinaryExpression.getReferencedVariableIdentifiers","location":"-draw-script/ast.expressions.binary/-binary-expression/get-referenced-variable-identifiers.html","searchKeys":["getReferencedVariableIdentifiers","open override fun getReferencedVariableIdentifiers(): List<String>","ast.expressions.binary.BinaryExpression.getReferencedVariableIdentifiers"]},{"name":"open override fun getReferencedVariableIdentifiers(): List<String>","description":"ast.expressions.literal.Colour.getReferencedVariableIdentifiers","location":"-draw-script/ast.expressions.literal/-colour/get-referenced-variable-identifiers.html","searchKeys":["getReferencedVariableIdentifiers","open override fun getReferencedVariableIdentifiers(): List<String>","ast.expressions.literal.Colour.getReferencedVariableIdentifiers"]},{"name":"open override fun getReferencedVariableIdentifiers(): List<String>","description":"ast.expressions.literal.Interval.getReferencedVariableIdentifiers","location":"-draw-script/ast.expressions.literal/-interval/get-referenced-variable-identifiers.html","searchKeys":["getReferencedVariableIdentifiers","open override fun getReferencedVariableIdentifiers(): List<String>","ast.expressions.literal.Interval.getReferencedVariableIdentifiers"]},{"name":"open override fun getReferencedVariableIdentifiers(): List<String>","description":"ast.expressions.literal.Point.getReferencedVariableIdentifiers","location":"-draw-script/ast.expressions.literal/-point/get-referenced-variable-identifiers.html","searchKeys":["getReferencedVariableIdentifiers","open override fun getReferencedVariableIdentifiers(): List<String>","ast.expressions.literal.Point.getReferencedVariableIdentifiers"]},{"name":"open override fun getReferencedVariableIdentifiers(): List<String>","description":"ast.expressions.literal.VariableReference.getReferencedVariableIdentifiers","location":"-draw-script/ast.expressions.literal/-variable-reference/get-referenced-variable-identifiers.html","searchKeys":["getReferencedVariableIdentifiers","open override fun getReferencedVariableIdentifiers(): List<String>","ast.expressions.literal.VariableReference.getReferencedVariableIdentifiers"]},{"name":"open override fun toString(): String","description":"ast.Script.toString","location":"-draw-script/ast/-script/to-string.html","searchKeys":["toString","open override fun toString(): String","ast.Script.toString"]},{"name":"open override fun toString(): String","description":"ast.expressions.binary.BinaryExpression.toString","location":"-draw-script/ast.expressions.binary/-binary-expression/to-string.html","searchKeys":["toString","open override fun toString(): String","ast.expressions.binary.BinaryExpression.toString"]},{"name":"open override fun toString(): String","description":"ast.expressions.binary.BinaryOperator.toString","location":"-draw-script/ast.expressions.binary/-binary-operator/to-string.html","searchKeys":["toString","open override fun toString(): String","ast.expressions.binary.BinaryOperator.toString"]},{"name":"open override fun toString(): String","description":"ast.expressions.literal.Bool.toString","location":"-draw-script/ast.expressions.literal/-bool/to-string.html","searchKeys":["toString","open override fun toString(): String","ast.expressions.literal.Bool.toString"]},{"name":"open override fun toString(): String","description":"ast.expressions.literal.Colour.toString","location":"-draw-script/ast.expressions.literal/-colour/to-string.html","searchKeys":["toString","open override fun toString(): String","ast.expressions.literal.Colour.toString"]},{"name":"open override fun toString(): String","description":"ast.expressions.literal.ConstantReference.toString","location":"-draw-script/ast.expressions.literal/-constant-reference/to-string.html","searchKeys":["toString","open override fun toString(): String","ast.expressions.literal.ConstantReference.toString"]},{"name":"open override fun toString(): String","description":"ast.expressions.literal.Interval.toString","location":"-draw-script/ast.expressions.literal/-interval/to-string.html","searchKeys":["toString","open override fun toString(): String","ast.expressions.literal.Interval.toString"]},{"name":"open override fun toString(): String","description":"ast.expressions.literal.Number.toString","location":"-draw-script/ast.expressions.literal/-number/to-string.html","searchKeys":["toString","open override fun toString(): String","ast.expressions.literal.Number.toString"]},{"name":"open override fun toString(): String","description":"ast.expressions.literal.Point.toString","location":"-draw-script/ast.expressions.literal/-point/to-string.html","searchKeys":["toString","open override fun toString(): String","ast.expressions.literal.Point.toString"]},{"name":"open override fun toString(): String","description":"ast.expressions.literal.VariableReference.toString","location":"-draw-script/ast.expressions.literal/-variable-reference/to-string.html","searchKeys":["toString","open override fun toString(): String","ast.expressions.literal.VariableReference.toString"]},{"name":"open override fun toString(): String","description":"ast.instructions.colour.SetFillColour.toString","location":"-draw-script/ast.instructions.colour/-set-fill-colour/to-string.html","searchKeys":["toString","open override fun toString(): String","ast.instructions.colour.SetFillColour.toString"]},{"name":"open override fun toString(): String","description":"ast.instructions.colour.SetLineColour.toString","location":"-draw-script/ast.instructions.colour/-set-line-colour/to-string.html","searchKeys":["toString","open override fun toString(): String","ast.instructions.colour.SetLineColour.toString"]},{"name":"open override fun toString(): String","description":"ast.instructions.control.Branch.toString","location":"-draw-script/ast.instructions.control/-branch/to-string.html","searchKeys":["toString","open override fun toString(): String","ast.instructions.control.Branch.toString"]},{"name":"open override fun toString(): String","description":"ast.instructions.control.Iteration.toString","location":"-draw-script/ast.instructions.control/-iteration/to-string.html","searchKeys":["toString","open override fun toString(): String","ast.instructions.control.Iteration.toString"]},{"name":"open override fun toString(): String","description":"ast.instructions.figure.Circle.toString","location":"-draw-script/ast.instructions.figure/-circle/to-string.html","searchKeys":["toString","open override fun toString(): String","ast.instructions.figure.Circle.toString"]},{"name":"open override fun toString(): String","description":"ast.instructions.figure.Ellipse.toString","location":"-draw-script/ast.instructions.figure/-ellipse/to-string.html","searchKeys":["toString","open override fun toString(): String","ast.instructions.figure.Ellipse.toString"]},{"name":"open override fun toString(): String","description":"ast.instructions.figure.Line.toString","location":"-draw-script/ast.instructions.figure/-line/to-string.html","searchKeys":["toString","open override fun toString(): String","ast.instructions.figure.Line.toString"]},{"name":"open override fun toString(): String","description":"ast.instructions.figure.Polyline.toString","location":"-draw-script/ast.instructions.figure/-polyline/to-string.html","searchKeys":["toString","open override fun toString(): String","ast.instructions.figure.Polyline.toString"]},{"name":"open override fun toString(): String","description":"ast.instructions.figure.Rectangle.toString","location":"-draw-script/ast.instructions.figure/-rectangle/to-string.html","searchKeys":["toString","open override fun toString(): String","ast.instructions.figure.Rectangle.toString"]},{"name":"open override fun toString(): String","description":"ast.instructions.figure.Square.toString","location":"-draw-script/ast.instructions.figure/-square/to-string.html","searchKeys":["toString","open override fun toString(): String","ast.instructions.figure.Square.toString"]},{"name":"open override fun toString(): String","description":"ast.validation.SemanticError.toString","location":"-draw-script/ast.validation/-semantic-error/to-string.html","searchKeys":["toString","open override fun toString(): String","ast.validation.SemanticError.toString"]},{"name":"open override val center: Point","description":"ast.instructions.figure.Circle.center","location":"-draw-script/ast.instructions.figure/-circle/center.html","searchKeys":["center","open override val center: Point","ast.instructions.figure.Circle.center"]},{"name":"open override val start: Point","description":"ast.instructions.figure.Line.start","location":"-draw-script/ast.instructions.figure/-line/start.html","searchKeys":["start","open override val start: Point","ast.instructions.figure.Line.start"]},{"name":"open override val start: Point","description":"ast.instructions.figure.Polyline.start","location":"-draw-script/ast.instructions.figure/-polyline/start.html","searchKeys":["start","open override val start: Point","ast.instructions.figure.Polyline.start"]},{"name":"open override val start: Point","description":"ast.instructions.figure.Rectangle.start","location":"-draw-script/ast.instructions.figure/-rectangle/start.html","searchKeys":["start","open override val start: Point","ast.instructions.figure.Rectangle.start"]},{"name":"open override val start: Point","description":"ast.instructions.figure.Square.start","location":"-draw-script/ast.instructions.figure/-square/start.html","searchKeys":["start","open override val start: Point","ast.instructions.figure.Square.start"]},{"name":"open override var parent: Instruction?","description":"ast.instructions.colour.SetFillColour.parent","location":"-draw-script/ast.instructions.colour/-set-fill-colour/parent.html","searchKeys":["parent","open override var parent: Instruction?","ast.instructions.colour.SetFillColour.parent"]},{"name":"open override var parent: Instruction?","description":"ast.instructions.colour.SetLineColour.parent","location":"-draw-script/ast.instructions.colour/-set-line-colour/parent.html","searchKeys":["parent","open override var parent: Instruction?","ast.instructions.colour.SetLineColour.parent"]},{"name":"open override var parent: Instruction?","description":"ast.instructions.control.Branch.parent","location":"-draw-script/ast.instructions.control/-branch/parent.html","searchKeys":["parent","open override var parent: Instruction?","ast.instructions.control.Branch.parent"]},{"name":"open override var parent: Instruction?","description":"ast.instructions.control.Iteration.parent","location":"-draw-script/ast.instructions.control/-iteration/parent.html","searchKeys":["parent","open override var parent: Instruction?","ast.instructions.control.Iteration.parent"]},{"name":"open override var parent: Instruction?","description":"ast.instructions.figure.FigureInstruction.parent","location":"-draw-script/ast.instructions.figure/-figure-instruction/parent.html","searchKeys":["parent","open override var parent: Instruction?","ast.instructions.figure.FigureInstruction.parent"]},{"name":"open val center: Point","description":"ast.instructions.figure.Ellipse.center","location":"-draw-script/ast.instructions.figure/-ellipse/center.html","searchKeys":["center","open val center: Point","ast.instructions.figure.Ellipse.center"]},{"name":"open val start: Point","description":"ast.instructions.figure.FigureInstruction.start","location":"-draw-script/ast.instructions.figure/-figure-instruction/start.html","searchKeys":["start","open val start: Point","ast.instructions.figure.FigureInstruction.start"]},{"name":"sealed class SemanticError","description":"ast.validation.SemanticError","location":"-draw-script/ast.validation/-semantic-error/index.html","searchKeys":["SemanticError","sealed class SemanticError","ast.validation.SemanticError"]},{"name":"val actual: Expression.ExpressionType","description":"ast.validation.InvalidReferenceType.actual","location":"-draw-script/ast.validation/-invalid-reference-type/actual.html","searchKeys":["actual","val actual: Expression.ExpressionType","ast.validation.InvalidReferenceType.actual"]},{"name":"val alternative: List<Instruction>","description":"ast.instructions.control.Branch.alternative","location":"-draw-script/ast.instructions.control/-branch/alternative.html","searchKeys":["alternative","val alternative: List<Instruction>","ast.instructions.control.Branch.alternative"]},{"name":"val b: Int","description":"ast.validation.InvalidColorRGBValues.b","location":"-draw-script/ast.validation/-invalid-color-r-g-b-values/b.html","searchKeys":["b","val b: Int","ast.validation.InvalidColorRGBValues.b"]},{"name":"val backgroundColour: Expression","description":"ast.Script.backgroundColour","location":"-draw-script/ast/-script/background-colour.html","searchKeys":["backgroundColour","val backgroundColour: Expression","ast.Script.backgroundColour"]},{"name":"val blue: Expression","description":"ast.expressions.literal.Colour.blue","location":"-draw-script/ast.expressions.literal/-colour/blue.html","searchKeys":["blue","val blue: Expression","ast.expressions.literal.Colour.blue"]},{"name":"val body: List<Instruction>","description":"ast.instructions.control.Branch.body","location":"-draw-script/ast.instructions.control/-branch/body.html","searchKeys":["body","val body: List<Instruction>","ast.instructions.control.Branch.body"]},{"name":"val body: List<Instruction>","description":"ast.instructions.control.Iteration.body","location":"-draw-script/ast.instructions.control/-iteration/body.html","searchKeys":["body","val body: List<Instruction>","ast.instructions.control.Iteration.body"]},{"name":"val colour: Expression","description":"ast.instructions.colour.SetFillColour.colour","location":"-draw-script/ast.instructions.colour/-set-fill-colour/colour.html","searchKeys":["colour","val colour: Expression","ast.instructions.colour.SetFillColour.colour"]},{"name":"val colour: Expression","description":"ast.instructions.colour.SetLineColour.colour","location":"-draw-script/ast.instructions.colour/-set-line-colour/colour.html","searchKeys":["colour","val colour: Expression","ast.instructions.colour.SetLineColour.colour"]},{"name":"val constants: Map<String, Expression>","description":"ast.Script.constants","location":"-draw-script/ast/-script/constants.html","searchKeys":["constants","val constants: Map<String, Expression>","ast.Script.constants"]},{"name":"val dimension: Expression","description":"ast.Script.dimension","location":"-draw-script/ast/-script/dimension.html","searchKeys":["dimension","val dimension: Expression","ast.Script.dimension"]},{"name":"val end: Expression","description":"ast.expressions.literal.Interval.end","location":"-draw-script/ast.expressions.literal/-interval/end.html","searchKeys":["end","val end: Expression","ast.expressions.literal.Interval.end"]},{"name":"val end: Point","description":"ast.instructions.figure.Line.end","location":"-draw-script/ast.instructions.figure/-line/end.html","searchKeys":["end","val end: Point","ast.instructions.figure.Line.end"]},{"name":"val expected: List<Expression.ExpressionType>","description":"ast.validation.InvalidReferenceType.expected","location":"-draw-script/ast.validation/-invalid-reference-type/expected.html","searchKeys":["expected","val expected: List<Expression.ExpressionType>","ast.validation.InvalidReferenceType.expected"]},{"name":"val g: Int","description":"ast.validation.InvalidColorRGBValues.g","location":"-draw-script/ast.validation/-invalid-color-r-g-b-values/g.html","searchKeys":["g","val g: Int","ast.validation.InvalidColorRGBValues.g"]},{"name":"val green: Expression","description":"ast.expressions.literal.Colour.green","location":"-draw-script/ast.expressions.literal/-colour/green.html","searchKeys":["green","val green: Expression","ast.expressions.literal.Colour.green"]},{"name":"val guard: Expression","description":"ast.instructions.control.Branch.guard","location":"-draw-script/ast.instructions.control/-branch/guard.html","searchKeys":["guard","val guard: Expression","ast.instructions.control.Branch.guard"]},{"name":"val height: Expression","description":"ast.instructions.figure.Ellipse.height","location":"-draw-script/ast.instructions.figure/-ellipse/height.html","searchKeys":["height","val height: Expression","ast.instructions.figure.Ellipse.height"]},{"name":"val height: Expression","description":"ast.instructions.figure.Rectangle.height","location":"-draw-script/ast.instructions.figure/-rectangle/height.html","searchKeys":["height","val height: Expression","ast.instructions.figure.Rectangle.height"]},{"name":"val identifier: String","description":"ast.expressions.literal.ConstantReference.identifier","location":"-draw-script/ast.expressions.literal/-constant-reference/identifier.html","searchKeys":["identifier","val identifier: String","ast.expressions.literal.ConstantReference.identifier"]},{"name":"val identifier: String","description":"ast.expressions.literal.VariableReference.identifier","location":"-draw-script/ast.expressions.literal/-variable-reference/identifier.html","searchKeys":["identifier","val identifier: String","ast.expressions.literal.VariableReference.identifier"]},{"name":"val identifier: String","description":"ast.validation.UndefinedConstantReference.identifier","location":"-draw-script/ast.validation/-undefined-constant-reference/identifier.html","searchKeys":["identifier","val identifier: String","ast.validation.UndefinedConstantReference.identifier"]},{"name":"val instructions: List<Instruction>","description":"ast.Script.instructions","location":"-draw-script/ast/-script/instructions.html","searchKeys":["instructions","val instructions: List<Instruction>","ast.Script.instructions"]},{"name":"val interval: Interval","description":"ast.instructions.control.Iteration.interval","location":"-draw-script/ast.instructions.control/-iteration/interval.html","searchKeys":["interval","val interval: Interval","ast.instructions.control.Iteration.interval"]},{"name":"val interval: Interval","description":"ast.validation.InvalidIntervalDefinition.interval","location":"-draw-script/ast.validation/-invalid-interval-definition/interval.html","searchKeys":["interval","val interval: Interval","ast.validation.InvalidIntervalDefinition.interval"]},{"name":"val isArithmetic: Boolean","description":"ast.expressions.binary.BinaryOperator.isArithmetic","location":"-draw-script/ast.expressions.binary/-binary-operator/is-arithmetic.html","searchKeys":["isArithmetic","val isArithmetic: Boolean","ast.expressions.binary.BinaryOperator.isArithmetic"]},{"name":"val isRelational: Boolean","description":"ast.expressions.binary.BinaryOperator.isRelational","location":"-draw-script/ast.expressions.binary/-binary-operator/is-relational.html","searchKeys":["isRelational","val isRelational: Boolean","ast.expressions.binary.BinaryOperator.isRelational"]},{"name":"val iterator: VariableReference","description":"ast.instructions.control.Iteration.iterator","location":"-draw-script/ast.instructions.control/-iteration/iterator.html","searchKeys":["iterator","val iterator: VariableReference","ast.instructions.control.Iteration.iterator"]},{"name":"val left: Expression","description":"ast.expressions.binary.BinaryExpression.left","location":"-draw-script/ast.expressions.binary/-binary-expression/left.html","searchKeys":["left","val left: Expression","ast.expressions.binary.BinaryExpression.left"]},{"name":"val length: Expression","description":"ast.instructions.figure.Square.length","location":"-draw-script/ast.instructions.figure/-square/length.html","searchKeys":["length","val length: Expression","ast.instructions.figure.Square.length"]},{"name":"val message: String","description":"ast.validation.SemanticError.message","location":"-draw-script/ast.validation/-semantic-error/message.html","searchKeys":["message","val message: String","ast.validation.SemanticError.message"]},{"name":"val operator: BinaryOperator","description":"ast.expressions.binary.BinaryExpression.operator","location":"-draw-script/ast.expressions.binary/-binary-expression/operator.html","searchKeys":["operator","val operator: BinaryOperator","ast.expressions.binary.BinaryExpression.operator"]},{"name":"val points: List<Point>","description":"ast.instructions.figure.Polyline.points","location":"-draw-script/ast.instructions.figure/-polyline/points.html","searchKeys":["points","val points: List<Point>","ast.instructions.figure.Polyline.points"]},{"name":"val r: Int","description":"ast.validation.InvalidColorRGBValues.r","location":"-draw-script/ast.validation/-invalid-color-r-g-b-values/r.html","searchKeys":["r","val r: Int","ast.validation.InvalidColorRGBValues.r"]},{"name":"val radius: Expression","description":"ast.instructions.figure.Circle.radius","location":"-draw-script/ast.instructions.figure/-circle/radius.html","searchKeys":["radius","val radius: Expression","ast.instructions.figure.Circle.radius"]},{"name":"val red: Expression","description":"ast.expressions.literal.Colour.red","location":"-draw-script/ast.expressions.literal/-colour/red.html","searchKeys":["red","val red: Expression","ast.expressions.literal.Colour.red"]},{"name":"val right: Expression","description":"ast.expressions.binary.BinaryExpression.right","location":"-draw-script/ast.expressions.binary/-binary-expression/right.html","searchKeys":["right","val right: Expression","ast.expressions.binary.BinaryExpression.right"]},{"name":"val source: BinaryExpression","description":"ast.validation.InvalidBinaryExpressionOperatorContext.source","location":"-draw-script/ast.validation/-invalid-binary-expression-operator-context/source.html","searchKeys":["source","val source: BinaryExpression","ast.validation.InvalidBinaryExpressionOperatorContext.source"]},{"name":"val source: Expression","description":"ast.validation.InvalidColorRGBValues.source","location":"-draw-script/ast.validation/-invalid-color-r-g-b-values/source.html","searchKeys":["source","val source: Expression","ast.validation.InvalidColorRGBValues.source"]},{"name":"val source: Expression","description":"ast.validation.InvalidReferenceType.source","location":"-draw-script/ast.validation/-invalid-reference-type/source.html","searchKeys":["source","val source: Expression","ast.validation.InvalidReferenceType.source"]},{"name":"val source: Expression","description":"ast.validation.UndefinedConstantReference.source","location":"-draw-script/ast.validation/-undefined-constant-reference/source.html","searchKeys":["source","val source: Expression","ast.validation.UndefinedConstantReference.source"]},{"name":"val start: Expression","description":"ast.expressions.literal.Interval.start","location":"-draw-script/ast.expressions.literal/-interval/start.html","searchKeys":["start","val start: Expression","ast.expressions.literal.Interval.start"]},{"name":"val type: BinaryOperator.BinaryOperatorType","description":"ast.expressions.binary.BinaryOperator.type","location":"-draw-script/ast.expressions.binary/-binary-operator/type.html","searchKeys":["type","val type: BinaryOperator.BinaryOperatorType","ast.expressions.binary.BinaryOperator.type"]},{"name":"val type: Interval.IntervalType","description":"ast.expressions.literal.Interval.type","location":"-draw-script/ast.expressions.literal/-interval/type.html","searchKeys":["type","val type: Interval.IntervalType","ast.expressions.literal.Interval.type"]},{"name":"val value: Boolean","description":"ast.expressions.literal.Bool.value","location":"-draw-script/ast.expressions.literal/-bool/value.html","searchKeys":["value","val value: Boolean","ast.expressions.literal.Bool.value"]},{"name":"val value: Int","description":"ast.expressions.literal.Number.value","location":"-draw-script/ast.expressions.literal/-number/value.html","searchKeys":["value","val value: Int","ast.expressions.literal.Number.value"]},{"name":"val width: Expression","description":"ast.instructions.figure.Ellipse.width","location":"-draw-script/ast.instructions.figure/-ellipse/width.html","searchKeys":["width","val width: Expression","ast.instructions.figure.Ellipse.width"]},{"name":"val width: Expression","description":"ast.instructions.figure.Rectangle.width","location":"-draw-script/ast.instructions.figure/-rectangle/width.html","searchKeys":["width","val width: Expression","ast.instructions.figure.Rectangle.width"]},{"name":"val x: Expression","description":"ast.expressions.literal.Point.x","location":"-draw-script/ast.expressions.literal/-point/x.html","searchKeys":["x","val x: Expression","ast.expressions.literal.Point.x"]},{"name":"val y: Expression","description":"ast.expressions.literal.Point.y","location":"-draw-script/ast.expressions.literal/-point/y.html","searchKeys":["y","val y: Expression","ast.expressions.literal.Point.y"]}]
